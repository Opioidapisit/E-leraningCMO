document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const loginPage = document.getElementById('login-page');
    const userPage = document.getElementById('user-page');
    const adminPage = document.getElementById('admin-page');
    const loginForm = document.getElementById('login-form');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const loginError = document.getElementById('login-error');

    const welcomeMessage = document.getElementById('welcome-message');
    const adminWelcomeMessage = document.getElementById('admin-welcome-message');
    const displayUserName = document.getElementById('display-user-name');
    const displayScore = document.getElementById('display-score');
    const displayStatus = document.getElementById('display-status');
    const scoreError = document.getElementById('score-error');
    const scoreDisplay = document.getElementById('score-display');

    const videoList = document.getElementById('video-list');
    const takeQuizButton = document.getElementById('take-quiz-button');
    const checkScoreButton = document.getElementById('check-score-button');

    // Admin specific elements (some will be simplified as management moves to Google Sheet)
    const videoLinkInput = document.getElementById('video-link-input'); // These inputs will now be for user info, not link management
    const addVideoLinkButton = document.getElementById('add-video-link-button'); // This button will be removed or repurposed
    const adminVideoList = document.getElementById('admin-video-list'); // This will now just display links from sheet
    const quizLinkInput = document.getElementById('quiz-link-input');
    const addQuizLinkButton = document.getElementById('add-quiz-link-button');
    const adminQuizList = document.getElementById('admin-quiz-list');

    const viewAllResultsButton = document.getElementById('view-all-results-button');
    const logoutButtonUser = document.getElementById('logout-button-user');
    const logoutButtonAdmin = document.getElementById('logout-button-admin');

    // User data (hardcoded for demonstration)
    const users = {
        admin: { password: 'admin', name: 'Admin', role: 'admin' },
        Ice: { password: '001-1', name: '‡πÑ‡∏≠‡∏ã‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏û‡∏ä‡∏£', role: 'user' },
        Bowy: { password: '001-2', name: '‡πÇ‡∏ö‡∏ß‡∏µ‡πà ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏û‡∏ä‡∏£', role: 'user' },
        Jha: { password: '002-1', name: '‡∏à‡πã‡∏≤ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏á', role: 'user' },
        Jaew: { password: '002-2', name: '‡πÅ‡∏à‡πã‡∏ß ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏á', role: 'user' },
        Zeegame: { password: '003-1', name: '‡∏ã‡∏µ‡πÄ‡∏Å‡∏°‡∏™‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏á', role: 'user' },
        Benz: { password: '003-2', name: '‡πÄ‡∏ö‡∏ô‡∏ä‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏á', role: 'user' },
        Mint: { password: '004-1', name: '‡∏°‡∏¥‡∏ô‡∏ó‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡πÇ‡∏¢‡∏á', role: 'user' },
        Pair: { password: '004-2', name: '‡πÅ‡∏û‡∏£ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡πÇ‡∏¢‡∏á', role: 'user' },
        Maprang: { password: '004-3', name: '‡∏°‡∏∞‡∏õ‡∏£‡∏≤‡∏á ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏≤‡πÇ‡∏¢‡∏á', role: 'user' },
        Maple: { password: '005-1', name: '‡πÄ‡∏°‡πÄ‡∏õ‡∏¥‡πâ‡∏• ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á', 'role': 'user' },
        Toey: { password: '005-2', name: '‡πÄ‡∏ï‡∏¢ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á', role: 'user' },
        Oil: { password: '005-3', name: '‡∏≠‡∏≠‡∏¢ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á', role: 'user' },
        Nuch: { password: '006-1', name: '‡∏ô‡∏∏‡∏ä ‡∏™‡∏≤‡∏Ç‡∏≤‡∏£‡∏±‡∏©‡∏é‡∏≤', role: 'user' },
        Few: { password: '006-2', name: '‡∏ü‡∏¥‡∏ß ‡∏™‡∏≤‡∏Ç‡∏≤‡∏£‡∏±‡∏©‡∏é‡∏≤', role: 'user' },
        Aom: { password: '007-1', name: '‡∏≠‡πâ‡∏≠‡∏° ‡∏™‡∏≤‡∏Ç‡∏≤‡∏£‡∏±‡∏Å‡∏©‡πå‡∏à‡∏±‡∏ô‡∏ó‡∏ô‡πå', role: 'user' },
        Pond: { password: '008-1', name: '‡∏û‡∏£ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏†‡∏≤‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ', role: 'user' },
        Bow: { password: '008-2', name: '‡πÇ‡∏ö‡∏ß‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏¥‡πä‡∏Å‡∏ã‡∏µ', role: 'user' },
        Cream: { password: '009-1', name: '‡∏Ñ‡∏£‡∏µ‡∏° ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏¥‡πä‡∏Å‡∏ã‡∏µ', role: 'user' }
    };

    let loggedInUser = null;

    // --- Google Sheet Configuration for Links ---
    const LINKS_SHEET_ID = '1zlybKBVi9sQ4NOBAXK7_0gxmDS6wS-fRytLnjHX_ZQI';
    const LINKS_GID = '1566756560'; // GID for the sheet containing video and quiz links
    const LINKS_GOOGLE_SHEET_URL = `https://docs.google.com/spreadsheets/d/${LINKS_SHEET_ID}/gviz/tq?tqx=out:csv&gid=${LINKS_GID}`;

    // --- Google Sheet Configuration for Scores ---
    const SCORES_SHEET_ID = '1zlybKBVi9sQ4NOBAXK7_0gxmDS6wS-fRytLnjHX_ZQI';
    const SCORES_GID = '441233492'; // GID for the sheet containing scores
    const SCORES_GOOGLE_SHEET_URL = `https://docs.google.com/spreadsheets/d/${SCORES_SHEET_ID}/gviz/tq?tqx=out:csv&gid=${SCORES_GID}`;

    // --- Utility Functions ---
    function showPage(pageId) {
        loginPage.classList.add('hidden');
        userPage.classList.add('hidden');
        adminPage.classList.add('hidden');
        document.getElementById(pageId).classList.remove('hidden');
    }

    // Improved CSV parsing function
    const parseCSV = (text) => {
        const rows = text.trim().split(/\r?\n/);
        return rows.map(row => {
            const cells = [];
            let inQuote = false;
            let currentCell = '';
            for (let i = 0; i < row.length; i++) {
                const char = row[i];
                if (char === '"') {
                    inQuote = !inQuote;
                } else if (char === ',' && !inQuote) {
                    cells.push(currentCell.replace(/^"|"$/g, ''));
                    currentCell = '';
                } else {
                    currentCell += char;
                }
            }
            cells.push(currentCell.replace(/^"|"$/g, ''));
            return cells;
        });
    };

    function renderLinks(targetElement, links, type, isAdmin = false) {
        targetElement.innerHTML = '';
        if (links.length === 0) {
            targetElement.innerHTML = `<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ${type === 'video' ? '‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠' : '‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö'}‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</p>`;
            return;
        }
        links.forEach((link, index) => {
            if (link.trim() === '') return; // Skip empty links
            const div = document.createElement('div');
            div.className = `${type}-item`;
            const a = document.createElement('a');
            a.href = link;
            a.textContent = `${type === 'video' ? '‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠' : '‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö'} #${index + 1}`;
            a.target = '_blank';
            div.appendChild(a);
            targetElement.appendChild(div);
        });
    }

    // --- Login Functionality ---
    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (users[username] && users[username].password === password) {
            loggedInUser = username;
            loginError.textContent = '';
            usernameInput.value = '';
            passwordInput.value = '';

            const userDisplayName = users[loggedInUser].name;

            if (users[loggedInUser].role === 'admin') {
                adminWelcomeMessage.textContent = `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${userDisplayName} üéâ ‡∏°‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                loadAdminContent();
                showPage('admin-page');
            } else {
                welcomeMessage.textContent = `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${userDisplayName} üëã ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                displayUserName.textContent = userDisplayName;
                loadUserContent();
                showPage('user-page');
            }
        } else {
            loginError.textContent = '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        }
    });

    loginForm.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            loginForm.dispatchEvent(new Event('submit'));
        }
    });

    // --- User Page Functionality ---
    async function loadUserContent() {
        try {
            const response = await fetch(LINKS_GOOGLE_SHEET_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const csvText = await response.text();
            const rows = parseCSV(csvText);

            const headers = rows[0].map(header => header.trim());
            const videoColIndex = headers.indexOf('Video Link'); // Assuming column A is named "Video Link"
            const quizColIndex = headers.indexOf('Quiz Link');   // Assuming column B is named "Quiz Link"

            if (videoColIndex === -1 || quizColIndex === -1) {
                console.error("Column 'Video Link' or 'Quiz Link' not found in the links sheet.");
                videoList.innerHTML = '<p class="error-message">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á Admin</p>';
                takeQuizButton.disabled = true;
                return;
            }

            const videoLinks = [];
            const quizLinks = [];
            for (let i = 1; i < rows.length; i++) { // Start from second row (data rows)
                const row = rows[i];
                if (row[videoColIndex]) videoLinks.push(row[videoColIndex].trim());
                if (row[quizColIndex]) quizLinks.push(row[quizColIndex].trim());
            }

            renderLinks(videoList, videoLinks, 'video');

            // Store quiz links temporarily for the button
            takeQuizButton.onclick = () => {
                if (quizLinks.length > 0) {
                    window.open(quizLinks[0], '_blank', 'noopener,noreferrer');
                } else {
                    alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ Admin ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
                }
            };

        } catch (error) {
            console.error('Error fetching links from Google Sheet:', error);
            videoList.innerHTML = '<p class="error-message">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>';
            takeQuizButton.disabled = true;
        }
    }


    checkScoreButton.addEventListener('click', async () => {
        scoreError.textContent = '';
        scoreDisplay.classList.add('hidden');
        displayScore.textContent = '';
        displayStatus.textContent = '';

        if (!loggedInUser) {
            scoreError.textContent = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
            return;
        }

        const userNameForLookup = users[loggedInUser].name;
        console.log('User Name for Lookup:', userNameForLookup);

        try {
            const response = await fetch(SCORES_GOOGLE_SHEET_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const csvText = await response.text();
            console.log('Raw CSV Text (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô):', csvText);

            const rows = parseCSV(csvText);
            console.log('Parsed Rows (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô):', rows);

            const headers = rows[0].map(header => header.trim());
            const dataRows = rows.slice(1);
            console.log('Headers (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô):', headers);

            const userColIndex = headers.indexOf('User');
            const scoreColIndex = headers.indexOf('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô');
            const statusColIndex = headers.indexOf('Status');
            console.log('Column Indices - User:', userColIndex, '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:', scoreColIndex, 'Status:', statusColIndex);

            if (userColIndex === -1 || scoreColIndex === -1 || statusColIndex === -1) {
                throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ('User', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô', 'Status') ‡πÉ‡∏ô Google Sheet ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏∞‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ **‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå** ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó");
            }

            let found = false;
            for (const row of dataRows) {
                const cellUserName = row[userColIndex] ? row[userColIndex].trim() : '';
                console.log('Checking row (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô):', cellUserName, 'against', userNameForLookup);
                if (cellUserName === userNameForLookup) {
                    displayScore.textContent = row[scoreColIndex] || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                    displayStatus.textContent = row[statusColIndex] || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
                    scoreDisplay.classList.remove('hidden');
                    found = true;
                    console.log('User found! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:', row[scoreColIndex], 'Status:', row[statusColIndex]);
                    break;
                }
            }

            if (!found) {
                scoreError.textContent = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô üòî';
            }

        } catch (error) {
            console.error('Error fetching or parsing spreadsheet data (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô):', error);
            scoreError.textContent = error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
        }
    });

    // --- Admin Page Functionality ---
    async function loadAdminContent() {
        try {
            const response = await fetch(LINKS_GOOGLE_SHEET_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const csvText = await response.text();
            const rows = parseCSV(csvText);

            const headers = rows[0].map(header => header.trim());
            const videoColIndex = headers.indexOf('Video Link');
            const quizColIndex = headers.indexOf('Quiz Link');

            if (videoColIndex === -1 || quizColIndex === -1) {
                console.error("Column 'Video Link' or 'Quiz Link' not found in the links sheet for admin view.");
                adminVideoList.innerHTML = '<p class="error-message">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó</p>';
                adminQuizList.innerHTML = '';
                return;
            }

            const videoLinks = [];
            const quizLinks = [];
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                if (row[videoColIndex]) videoLinks.push(row[videoColIndex].trim());
                if (row[quizColIndex]) quizLinks.push(row[quizColIndex].trim());
            }

            // For admin view, just display the links from the sheet.
            // Admin can edit the sheet directly.
            renderLinks(adminVideoList, videoLinks, 'video', true); // Pass true for isAdmin to show delete buttons (though they won't delete from sheet directly)
            renderLinks(adminQuizList, quizLinks, 'quiz', true);

            // Hide or disable local storage management UI for Admin
            videoLinkInput.style.display = 'none';
            addVideoLinkButton.style.display = 'none';
            quizLinkInput.style.display = 'none';
            addQuizLinkButton.style.display = 'none';

            // You might want to add a message for admin to edit the Google Sheet directly
            if (adminVideoList.innerHTML === '<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</p>') {
                 adminVideoList.innerHTML += '<p><strong>‚ÑπÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô Google Sheet ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A (Video Link)</strong></p>';
            }
            if (adminQuizList.innerHTML === '<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</p>') {
                adminQuizList.innerHTML += '<p><strong>‚ÑπÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô Google Sheet ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B (Quiz Link)</strong></p>';
            }


        } catch (error) {
            console.error('Error fetching links for admin from Google Sheet:', error);
            adminVideoList.innerHTML = '<p class="error-message">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á</p>';
            adminQuizList.innerHTML = '';
        }
    }


    // The Add/Delete link buttons for admin are now redundant as links are managed in Google Sheet
    // So we'll hide them via CSS or remove them in JS for clarity in admin page.
    // For now, I've added display: none in loadAdminContent().

    viewAllResultsButton.addEventListener('click', () => {
        const sheetLink = `https://docs.google.com/spreadsheets/d/${SCORES_SHEET_ID}/edit?resourcekey=&gid=${SCORES_GID}#gid=${SCORES_GID}`;
        window.open(sheetLink, '_blank', 'noopener,noreferrer');
    });

    // --- Logout Functionality ---
    logoutButtonUser.addEventListener('click', () => {
        loggedInUser = null;
        showPage('login-page');
    });

    logoutButtonAdmin.addEventListener('click', () => {
        loggedInUser = null;
        showPage('login-page');
    });

    // Initial page load (show login page)
    showPage('login-page');
});
